<Activity mc:Ignorable="sap sap2010" x:Class="Order_Allocation___Code_Yes" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uit="http://schemas.uipath.com/workflow/activities/terminal" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_TransactionItem" Type="InArgument(ui:QueueItem)" />
    <x:Property Name="in_TerminalConnection" Type="InArgument(uit:TerminalConnection)" />
    <x:Property Name="out_BusinessException" Type="OutArgument(ui:BusinessRuleException)" />
    <x:Property Name="in_ReportPath" Type="InArgument(x:String)" />
  </x:Members>
  <this:Order_Allocation___Code_Yes.in_ReportPath>
    <InArgument x:TypeArguments="x:String" />
  </this:Order_Allocation___Code_Yes.in_ReportPath>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1006,5410</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Order_Allocation___Code_Yes_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="33">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Terminal</x:String>
      <x:String>UiPath.Terminal.Service</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Terminal.Activities</x:String>
      <x:String>UiPath.Terminal.Enums</x:String>
      <x:String>UiPath.Terminal.Advanced.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="43">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Terminal.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Terminal</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>UiPath.Terminal.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Go to order allocation  when substitution code is equal to Y get the order count and verify if the item needs a substitution." DisplayName="Retalix - Order_Allocation___Code_Yes" sap:VirtualizedContainerService.HintSize="957,5345" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="GetAvaliable" />
      <Variable x:TypeArguments="x:String" Name="GetOrdered" />
      <Variable x:TypeArguments="x:Int32" Name="Avaliable" />
      <Variable x:TypeArguments="x:Int32" Name="Ordered" />
      <Variable x:TypeArguments="x:Boolean" Name="SubItemCheck" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="895,92" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;MartBot: Navigate to order allocation to search and verify the item.&quot;]" />
    <uit:TerminalSession ConnectionString="{x:Null}" ContinueOnError="{x:Null}" OutputConnection="{x:Null}" SSHPassword="{x:Null}" SSHUserName="{x:Null}" sap2010:Annotation.AnnotationText="&quot;{'AttachExisting':false,'ConnectionProtocol':0,'ConnectionType':1,'EhllBasicMode':false,'EhllDll':null,'EhllEnhanced':true,'EhllFunction':'hllapi','EhllSession':'A','EnableSSL':false,'Host':'10.101.6.131','InProcessMode':false,'InternalEncoding':'IBM037','Mode':1,'Port':7004,'Profile':null,'ProviderType':9,'ShowTerminal':true,'TerminalModel':0,'TerminalType':0}&quot;" CloseConnection="False" DelayMS="1000" DisplayName="Terminal Session" ExistingConnection="[in_TerminalConnection]" sap:VirtualizedContainerService.HintSize="895,5071" sap2010:WorkflowViewState.IdRef="TerminalSession_1" TimeoutMS="50000">
      <uit:TerminalSession.Body>
        <ActivityAction x:TypeArguments="uit:TerminalConnection">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="uit:TerminalConnection" Name="terminalSession" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="861,4914" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix - Utilitites\Retalix - Get Item Ordered.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="799,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Retalix - Utilitites\Retalix - Get Item Ordered.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">
                  <VisualBasicValue x:TypeArguments="uit:TerminalConnection" ExpressionText="in_TerminalConnection" />
                </InArgument>
                <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                  <VisualBasicValue x:TypeArguments="ui:QueueItem" ExpressionText="in_TransactionItem" />
                </InArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="out_Ordered">
                  <VisualBasicReference x:TypeArguments="x:String" ExpressionText="GetOrdered" />
                </OutArgument>
                <OutArgument x:TypeArguments="ui:BusinessRuleException" x:Key="out_BusinessException">
                  <VisualBasicReference x:TypeArguments="ui:BusinessRuleException" ExpressionText="out_BusinessException" />
                </OutArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_ReportPath">
                  <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_ReportPath" />
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_Item">
                  <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_TransactionItem.SpecificContent(&quot;Item&quot;).ToString" />
                </InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <If Condition="[out_BusinessException is Nothing]" sap:VirtualizedContainerService.HintSize="799,1920" sap2010:WorkflowViewState.IdRef="If_6">
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="540,1644" sap2010:WorkflowViewState.IdRef="Sequence_23">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <uit:TerminalSendControlKey DelayMS="1000" DisplayName="Send Control Key - Go Back" sap:VirtualizedContainerService.HintSize="478,60" sap2010:WorkflowViewState.IdRef="TerminalSendControlKey_15" Key="F1" TimeoutMS="5000" WaitType="READY" />
                  <uit:TerminalSendControlKey DelayMS="1000" DisplayName="Send Control Key - Go Back" sap:VirtualizedContainerService.HintSize="478,60" sap2010:WorkflowViewState.IdRef="TerminalSendControlKey_16" Key="F1" TimeoutMS="5000" WaitType="READY" />
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix - Utilitites\Retalix - Get Order Avaliable.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="478,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="Retalix - Utilitites\Retalix - Get Order Avaliable.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Item">[in_TransactionItem.SpecificContent("Item").ToString]</InArgument>
                      <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="out_Avaliable">[GetAvaliable]</OutArgument>
                      <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <Assign DisplayName="Assign - Check Null" sap:VirtualizedContainerService.HintSize="478,61" sap2010:WorkflowViewState.IdRef="Assign_24">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[GetAvaliable]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[if( String.IsNullOrEmpty( GetAvaliable ), "0", GetAvaliable)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[GetAvaliable.Contains(&quot;-&quot;)]" DisplayName="If Check Negative Avaliable" sap:VirtualizedContainerService.HintSize="478,549" sap2010:WorkflowViewState.IdRef="If_7">
                    <If.Then>
                      <Sequence sap:VirtualizedContainerService.HintSize="400,273" sap2010:WorkflowViewState.IdRef="Sequence_24">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign - Replace Negative Simbol" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_12">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[GetAvaliable]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[GetAvaliable.Replace("-","").Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Assign - Convert Avaliable as Negative" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_13">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[Avaliable]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">[Int32.Parse( GetAvaliable ) * -1]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign - Convert Avaliable" sap:VirtualizedContainerService.HintSize="262,61" sap2010:WorkflowViewState.IdRef="Assign_14">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[Avaliable]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[Int32.Parse( GetAvaliable )]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <Assign DisplayName="Assign - Convert Order " sap:VirtualizedContainerService.HintSize="478,61" sap2010:WorkflowViewState.IdRef="Assign_15">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[Ordered]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[Int32.Parse( GetOrdered.Trim )]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[Ordered &lt; Avaliable]" sap:VirtualizedContainerService.HintSize="478,389" sap2010:WorkflowViewState.IdRef="If_9">
                    <If.Then>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Excel\Processing Report.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="Excel\Processing Report.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_ReportPath">[in_ReportPath]</InArgument>
                          <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_OutputMessage">No substitution needed</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Status">Success</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </If.Then>
                  </If>
                </Sequence>
              </If.Then>
            </If>
            <If Condition="[( out_BusinessException is Nothing ) And ( Ordered &gt; Avaliable )]" sap:VirtualizedContainerService.HintSize="799,2690" sap2010:WorkflowViewState.IdRef="If_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="721,2414" sap2010:WorkflowViewState.IdRef="Sequence_20">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix\Retalix - Confirm enought open count.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="659,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="Retalix\Retalix - Confirm enought open count.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                      <InArgument x:TypeArguments="x:Int32" x:Key="in_Ordered">[Ordered]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_ReportPath">[in_ReportPath]</InArgument>
                      <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                      <OutArgument x:TypeArguments="x:Boolean" x:Key="out_SubItemCheck">[SubItemCheck]</OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <If Condition="[( SubItemCheck = True )]" sap:VirtualizedContainerService.HintSize="659,2150" sap2010:WorkflowViewState.IdRef="If_12">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence sap:VirtualizedContainerService.HintSize="581,1874" sap2010:WorkflowViewState.IdRef="Sequence_25">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign - Restar Avaliable" sap:VirtualizedContainerService.HintSize="519,61" sap2010:WorkflowViewState.IdRef="Assign_20">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[Avaliable]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix - Utilitites\Retalix - Return Main Menu.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="519,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="Retalix - Utilitites\Retalix - Return Main Menu.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix - Utilitites\Retalix - Get Order Avaliable.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="519,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="Retalix - Utilitites\Retalix - Get Order Avaliable.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Item">[in_TransactionItem.SpecificContent("SubItem").ToString]</InArgument>
                            <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                            <OutArgument x:TypeArguments="x:String" x:Key="out_Avaliable">[GetAvaliable]</OutArgument>
                            <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                        <Assign DisplayName="Assign - Check Null" sap:VirtualizedContainerService.HintSize="519,61" sap2010:WorkflowViewState.IdRef="Assign_25">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[GetAvaliable]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[if( String.IsNullOrEmpty( GetAvaliable ), "0", GetAvaliable)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <If Condition="[GetAvaliable.Contains(&quot;-&quot;)]" DisplayName="If - Parse Avaliable" sap:VirtualizedContainerService.HintSize="519,549" sap2010:WorkflowViewState.IdRef="If_14">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="400,273" sap2010:WorkflowViewState.IdRef="Sequence_28">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign DisplayName="Assign - Replace Negative Simbol" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_21">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[GetAvaliable]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[GetAvaliable.Replace("-","").Trim]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign DisplayName="Assign - Convert Avaliable as Negative" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_22">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Int32">[Avaliable]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Int32">[Int32.Parse( GetAvaliable ) * -1]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Assign DisplayName="Assign - Convert Avaliable" sap:VirtualizedContainerService.HintSize="262,61" sap2010:WorkflowViewState.IdRef="Assign_23">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">[Avaliable]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">[Int32.Parse( GetAvaliable )]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Else>
                        </If>
                        <If Condition="[Avaliable &gt; Ordered]" sap:VirtualizedContainerService.HintSize="519,666" sap2010:WorkflowViewState.IdRef="If_15">
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="441,377" sap2010:WorkflowViewState.IdRef="Sequence_31">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix - Utilitites\Retalix - Return Main Menu.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="379,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" UnSafe="False" WorkflowFileName="Retalix - Utilitites\Retalix - Return Main Menu.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Retalix\Retalix - Purchasing Menu - Code F.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="379,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" UnSafe="False" WorkflowFileName="Retalix\Retalix - Purchasing Menu - Code F.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="uit:TerminalConnection" x:Key="in_TerminalConnection">[in_TerminalConnection]</InArgument>
                                  <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_ReportPath">[in_ReportPath]</InArgument>
                                  <OutArgument x:TypeArguments="ui:BusinessRuleException" x:Key="out_BusinessException">[out_BusinessException]</OutArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Excel\Processing Report.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="Excel\Processing Report.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_ReportPath">[in_ReportPath]</InArgument>
                                <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_OutputMessage">No Inventory in the Sub Item.</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_Status">Exception</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                          </If.Else>
                        </If>
                      </Sequence>
                    </If.Then>
                  </If>
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
        </ActivityAction>
      </uit:TerminalSession.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </uit:TerminalSession>
  </Sequence>
</Activity>